const { EmbedBuilder, ApplicationCommandType, ApplicationCommandOptionType } = require("discord.js")
const fetch = require('node-fetch');
      const ms = require('ms');
const { Embed } = require("discord.js");


      
module.exports = {
    name: "mute",
    options: [{
        name: "user",
        type: ApplicationCommandOptionType.User,
        description: "Provide the user to SHUTUP.",
        required: true
    },
    {
        name: "time",
        type: ApplicationCommandOptionType.String,
        description: "Please specify the time between **10 seconds** (10s) and **28 days** (28d)..",
        required: true
    },
    {
        name: "reason",
        type: ApplicationCommandOptionType.String,
        description: "Provide the reason for the timeout.",
        required: true
    }], // Optional
    type: ApplicationCommandType.ChatInput,
    description: "SHUTUP? yes",
    allClientPermissions: ["ModerateMembers"],
    allUserPermissions: ["ModerateMembers"],
    guilds: ["1013568585894985758"], // Optional (Makes it a guild cmd in the provided Guild IDs)
    run: async(client, interaction) => {
        const user = interaction.options.getUser("user");
        const time = interaction.options.getString("time");
        const reason = interaction.options.getString("reason");

        //discord.js v14 mute command
        const member = interaction.guild.members.cache.get(user.id);
        const role = interaction.guild.roles.cache.find(role => role.name === "Muted");
        if (!role) {
            try {
                interaction.guilds.roles.create({
                    data: {
                        name: "Muted",
                        color: "#000000",
                        permissions: []
                    }
                }).then(role => {
                    interaction.guilds.channels.cache.forEach(channel => {
                        channel.createOverwrite(role, {
                            SendMessages: false,
                            AddReactions: false,
                            Speak: false
                        });
                    });
                });
            } catch (e) {
                console.log(e.stack);
            }
        

        
        }
        if (member.roles.cache.has(role.id)) return interaction.reply({ content: "This user is already muted!", ephemeral: false });
        await member.roles.add(role);
        interaction.reply({ content: `${user.tag} has been muted for ${ms(ms(time), { long: true })}`, ephemeral: false });
        setTimeout(function () {
            member.roles.remove(role);
            interaction.channel.send({ content: `${user.tag} has been unmuted!`, ephemeral: false });
        }, ms(time));





        


            
        }

    }
    
